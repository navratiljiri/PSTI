v1
# intersect() -> najde spolecne prvky zadanych vektoru
v2 <- intersect(vec,vec2)
v2
# unique() -> funkce zobrazi kazdy prvek vstupniho vektoru prave jednou
vec2
pX0 <- 0.2*0.4*0.5
pX1 <- pA * pBn * pCn + pAn * pB * pCn + pAn * pBn * pC
pA <- 0.8
pB <- 0.6
pC <- 0.5
pAn <- 1 - pA
pBn <- 1 - pB
pCn <- 1 - pC
pZpodmX0 <- 0 #netrefí se nikdo
pZpodmX1 <- 0.4
pZpodmX2 <- 0.8
pZpodmX2 <- 1
pX0 <- 0.2*0.4*0.5 #Nikdo se netrefí
pX1 <- pA * pBn * pCn + pAn * pB * pCn + pAn * pBn * pC
pX2 <- pA * pB * pCn + pAn * pB * pC + pA * pBn * pC
pX2 <- pA * pB * pC
pX0 <- 0.2*0.4*0.5 #Nikdo se netrefí
pX1 <- pA * pBn * pCn + pAn * pB * pCn + pAn * pBn * pC
pX2 <- pA * pB * pCn + pAn * pB * pC + pA * pBn * pC
pX3 <- pA * pB * pC
pZ <- (pX2 * pZpodmX2) / pX2
pZ <- (pX2 * pZpodmX2)
# vyuzijeme vzorovy datovy soubor "iris"
?iris
df <- iris
str(iris)
summary(iris)
# vyuzijeme vzorovy datovy soubor "iris"
?iris
rm(list = ls())
# vyuzijeme vzorovy datovy soubor "iris"
?iris
df <- iris
str(iris)
summary(iris)
apply(X,2,min)    # min ze vsech sloupcu
# vyuziti nekterych v R definovanych funkci
X <- as.matrix(iris[,-5]) # vybereme pouze ciselne promenne z dat
apply(X,2,min)    # min ze vsech sloupcu
apply(X,1,max)    # max ze vsech radku
apply(X,2,var)    # rozptyl ze vsech sloupcu
apply(X,2,sd)     # smerodatna odchylka ze vsech sloupcu
sikmost <- function(x){   # funkci vzdy zaciname pomoci function(), v zavorce jsou vstupni argumenty (muze jich byt samozrejme nekolik)
n <- length(x)
s <- sd(x)
prum <- mean(x)
alfa <- ((sum((x-prum)^3))/n)/s^3
return(alfa)            # pokud funkce obsahuje vice dilcich vypoctu, tak pomoci return() urcime, co bude finalni vystup
}
# Pouziti nami definovane funkce (ktera v R neni definovana); predpis se napise za obecny prikaz function(x)
apply(X, 2, function(x) (min(x)+max(x))/3)     # dostaneme soucet min a max hodnoty ve sloupci vydeleny 3 (overte)
sikmost <- function(x){   # funkci vzdy zaciname pomoci function(), v zavorce jsou vstupni argumenty (muze jich byt samozrejme nekolik)
n <- length(x)
s <- sd(x)
prum <- mean(x)
alfa <- ((sum((x-prum)^3))/n)/s^3
return(alfa)            # pokud funkce obsahuje vice dilcich vypoctu, tak pomoci return() urcime, co bude finalni vystup
}
apply(X, 2, sikmost)
apply(X, 2, sikmost)
View(sikmost)
a <- seq(2,20,2)
b <- letters      # Pozn.: funkce "letters" vypise pismena abecedy; existuje k ni i varianta LETTERS pro kapitalky
d <- c(T,F,F,T,F,T,F)
L <- list(a,b,d)
View(L)
# pojmenujeme jednotlive objekty v listu
names(L) <- c("cisla","pismena","logicke")
View(L)
# pojmenujeme jednotlive objekty v listu
names(L) <- c("cisla","pismena","logicke")
View(L)
# indexovani v listech -> [[ ]] a [ ]
L[[1]]          # zavolame prvni slozku listu
View(L)
L[[2]][1:7]     # z druhe slozky vybereme prvky 1:7
L[["logicke"]]  # funguje i pomoci nazvu slozek listu
unlist(L)       # unlist() -> z listu udela jeden velky vektor
unlist(L)       # unlist() -> z listu udela jeden velky vektor
View(L)
unlist(L)       # unlist() -> z listu udela jeden velky vektor
# Zpet k funkcim lapply(), sapply
v1 <- seq(1,20,3)
L2 <- list(v1)
View(L)
View(L2)
lapply(L2, function(x) x^3)  # vsechny hodnoty v listu L2 umocnime na treti
sapply(L2, function(x) x^3)  # stejny vypocet, rozdilna podoba vystupu
v2 <- rep(c(2,4,6,8), times = 3)
v3 <- 1:15
L3 <- list(v1,v2,v3)
View(L3)
lapply(L3, range)
sapply(L3, range)
# tapply(X, INDEX, FUN = NULL)
# argumenty:
# - X: dany objekt (vektor, sloupec tabulky) -> " na co funkci pouzijeme"
# - INDEX: faktor, podle ktereho tridime -> podle ktere promenne data tridime
# - FUN: funkce, ktera je pouzita na kazdou uroven faktoru def. v INDEX
set.seed(1234)
sl1 <- runif(10,0,1)
sl2 <- rnorm(10,0,1)
group <- rep(c("A","B"), each = 5)
tab <- data.frame(sl1, sl2,group)
tab
tapply(tab$sl1, tab$group, mean)   # funkci pouzijeme na sloupec "sl1, tridime podle "group", chceme mean -> output je PRUMER kazde skupiny
# opet muzeme pouzit i vlastni funkci (bud napsanou za function(x), nebo predem definovanou)
tapply(tab$sl2, tab$group, function(x) (min(x)+max(x))/4)
tapply(tab$sl1, tab$group, sikmost)
library(lgrdata)
install.packages("lgrdata")
library(lgrdata)
howell
data(howell)
View(howell)
smodch = sd(howell$age)
apply(howell$age, 2, z-score)
apply(howell$age, 2, zscore)
zscore <- function (x) {
smodch = sd(x)
prumer = mean(x)
# Rozdeleni dat do intervalu:
# 1. Kolik intervalu/kategorii potrebujeme -> K (Sturgesovo pravidlo)
N <- nrow(x)
K <- 1 + 3.3*log(N, base = 10) # parametr base -> zaklad logaritmu (log je v R defaultne prirozeny logaritmus "ln")
# 2. Sirka intervalu
vr <- max(df$X) - min(df$X)   # variacni rozpeti
sirka <- vr/K
K2 <- round(K)
A1 = floor(min(x))
A <- seq(A1, (K2-1)*sirka2, by = sirka2)
B <- seq(A1+sirka2, K2*sirka2, by = sirka2)
xk <- (B+A)/2
xk
return
}
apply(howell$age, 2, zscore)
smodch = sd(x)
zscore <- function (x) {
smodch = sd(x)
prumer = mean(x)
N <- nrow(x)
K <- 1 + 3.3*log(N, base = 10) # parametr base -> zaklad logaritmu (log je v R defaultne prirozeny logaritmus "ln")
vr <- max(df$X) - min(df$X)   # variacni rozpeti
sirka <- vr/K
K2 <- round(K)
A1 = floor(min(x))
A <- seq(A1, (K2-1)*sirka, by = sirka)
B <- seq(A1+sirka, K2*sirka, by = sirka)
xk <- (B+A)/2
xk
return (xK - prumer) / smodch
}
apply(howell$age, 2, zscore)
howell$age
x = as.matrix(howell$age[,-5])
x = as.matrix(howell$age[,-5])
x = as.matrix(howell$age[,-5])
apply(howell$age, 1, zscore)
apply(howell$age, 1, zscore)
tapply(howell$age, howell$sex, function(x) mean(x))
dat <- data(howell)
dat <- data(howell)
data(howell)
apply(dat[,-1], 1, zscore)
apply(dat[,-1], 2, zscore)
tapply(howell$height, howell$sex, function(x) mean(x))
tapply(howell$age, howell$sex, function(x) mean(x))
tapply(howell$height, howell$sex, function(x) mean(x))
tapply(howell$age, howell$sex, summary)
tapply(howell$height, howell$sex, summary)
library(lgrdata)
dat <- data(howell)
dat <- data(howell)
dat <- howell
apply(dat[,-1], 2, zscore)
zscore <- function (x) {
smodch = sd(x)
prumer = mean(x)
return (x - prumer) / smodch
}
apply(dat[,-1], 2, zscore)
tapply(howell$height, howell$sex, summary)
apply(dat[,-1], 2, zscore)
# Priklad 1:
x <- 25
if(x > 0){
print("x je KLADNE cislo")
}
# co kdyz podminku zmenime:
if(x < 0){
print("x je ZAPORNE")
}
print("x NENI zaporne")
print("x NENI zaporne")
{
print("x NENI zaporne")
}
if (x < 0){
print("x je zaporne")
} else {
print("x neni zaporne")
}
print(i+i^2)   # for-cyklus postupne vypise vysledky teto male matematicke operace
# Priklad 1:
for(i in 1:15){
print(i+i^2)   # for-cyklus postupne vypise vysledky teto male matematicke operace
}
# Vysledky muzeme take ukladat -> vzdy si predtim vytvorime prazdny vektor/objekt, do ktereho vystup ulozime
vysledek <- c()
for(i in 1:20){
vysledek[i] <- i + 10^2
}
vysledek
# vypiseme cisla delitelna 3
for(i in 1:30){
if((i %% 3) == 0){   # operator %% -> modulo -> zbytek po deleni dalsim cislem (tj. pokud chceme cisla delitelne 3, tak by zbytek po deleni mel byt roven 0)
print(i)
}
}
length(dat)
nrow(dat)
for(i in nrow(dat)) {
datos[i] <- dat$weight[i] / dat$height^2
}
datos = c();
for(i in nrow(dat)) {
datos[i] <- dat$weight[i] / dat$height^2
}
for(i in nrow(dat)) {
datos[i] <- (dat$weight[i] / dat$height^2)
}
for(i in nrow(dat)) {
datos[i] <- (dat$weight[i] / dat$height[i]^2)
}
datos
print(cislo)
for(i in nrow(dat)) {
BMI[i] <- (dat$weight[i] / dat$height[i]^2)
}
BMI = c();
for(i in nrow(dat)) {
BMI[i] <- (dat$weight[i] / dat$height[i]^2)
}
BMI
dat$weight[1]
dat$weight[0]
dat$weight[0]
dat$weight[2]
dat$weight[3]
for(i in nrow(dat)) {
BMI[i] <- (dat$weight[i] / dat$height[i]^2)
}
BMI
dat$weight[1] / dat$height[1]^2
for(i in nrow(dat)) {
BMI[i] <- (dat[i, "weight"] / (dat[i, "height"]/100)^2)
}
BMI
for(i in nrow(dat)) {
weight = dat[i, "weight"];
height = dat[i, "height"]/100
BMI[i] <- weight/(height^2)
}
BMI
dat <- howell
BMI = c();
for(i in nrow(dat)) {
weight = dat[i, "weight"];
height = dat[i, "height"]/100
BMI[i] <- weight/(height^2)
}
BMI
setwd("C:/Develop/Skola/PSTI/pravdepodobnost/cviceni_5")
################################################################################
## KIKM/PSTI: cviceni 6 - Diskretni nahodna velicina
################################################################################
rm(list=ls())
X <- c(0,1) #realizace
pst <- (0.5,0.5) #pravděpodobnoti
pst <- c(0.5,0.5) #pravděpodobnoti
X*pst
EX <- sum(X*pst)
EX
a <- 2 * EX + 3
b <- 4*EX^2 + 5 * EX + 2
# b) E(4X^2 + 5X + 2) = 4*E(X^2) + 5*E(X) + 2
b <- 4*EX^2 + 5 * EX + 2
# b) E(4X^2 + 5X + 2) = 4*E(X^2) + 5*E(X) + 2
b <- 4*EX + 5 * EX + 2
EX2 <- sum(X^2*pst)
EX2
# b) E(4X^2 + 5X + 2) = 4*E(X^2) + 5*E(X) + 2
b <- 4*EX2 + 5 * EX + 2
rozptylx <- EX2 - (EX)^2
# c) var(6X - 7) = 36*var(X) - 0
c <- 36 * rozptylx - 0
EX4 <- sum(EX2^2*pst)
# d) var(X^2 + 3) = var(X^2) + 0 = E(X^4) - (E(X^2))^2
d <- EX4 - (EX2)^2
Y <- 1:6
pstY <- rep(1/6,6)
EY <- sum(Y*pstY)
# a) Z1 = 4*Y^2 - 5*Y + 2
Z1 <- 4*Y^2 - 5*Y + 2
Ez1 <- sum(Z1*pstY)
Ez1 <- sum(Z1*pstY)
# b) Z2 = 6*Y - 7
Z2 <- 6*Y-7
Ez2 <- sum(Z2*pstY)
W2 <- W^2
# d) var(X^2 + 3) = var(X^2) + 0 = E(X^4) - (E(X^2))^2
d <- EX4 - (EX2)^2
Y <- 1:6
# c) oznacme W = Z2; var(W) = E(W^2) - (EW)^2¨
W <- Z2
W2 <- W^2
# c) oznacme W = Z2; var(W) = E(W^2) - (EW)^2¨
W <- Z2
W2 <- W^2
EW<- Ez2
EW2 <- (W2 * pstY)
EW2 - (EW)^2
# c) oznacme W = Z2; var(W) = E(W^2) - (EW)^2¨
W <- Z2
W2 <- W^2
EW<- Ez2
EW2 <- sum(W2 * pstY)
EW2 - (EW)^2
# a) definicni obor:
X <- 0:3
# b) pravdepodobnostni funkce: uvazujeme nezavislost (to, jestli klient ma nebo nema uver, nezavisi na ostatnich klientech)
Px0 <- 0.9^3
Px1 <- 3 * 0.1 * 0.9^2
Px2 <- 3 * 0.1^2 * 0.9
Px2 <- 0.1 ^3
# b) pravdepodobnostni funkce: uvazujeme nezavislost (to, jestli klient ma nebo nema uver, nezavisi na ostatnich klientech)
Px0 <- 0.9^3
Px1 <- 3 * 0.1 * 0.9^2
Px2 <- 3 * 0.1^2 * 0.9
Px3 <- 0.1 ^3
Px0+Px1+Px2+Px3
EW2 - (EW)^2
# a) Z1 = 4*Y^2 - 5*Y + 2
pst <- c(Px0, Px1, Px2, Px3)
Ex <- sum(X, pst)
Ex <- sum(X, pst)
pst <- c(Px0, Px1, Px2, Px3)
Px0+Px1+Px2+Px3
Ex <- sum(X, pst)
Ex <- sum(X * pst)
# d) rozptyl var(X)
# vime: var(X) = E(X-E(X))^2
# oznacme: y = (X-E(X))^2
Y <- (X-Ex)^2
rozptylX <- sum(pst*Y)
vysl1 <- sum(3/7 * 0.7^x)
# a) P(X<3) = P(X=1) + P(X=2)
x <- c(1,2)
vysl1 <- sum(3/7 * 0.7^x)
vysl2 <- 1- sum(3/7 * 0,7^x)
vysl2 <- 1 - sum(3/7 * 0,7^x)
# b) P(X > 4) = 1 - P(X<=4)
x <- c(1,2,3,4)
vysl2 <- 1 - sum(3/7 * 0,7^x)
# b) P(X > 4) = 1 - P(X<=4)
x <- 1:4
vysl2 <- 1 - sum(3/7 * 0,7^x)
vysl2 <- 1 - sum(3/7 * 0,7^x)
vysl1 <- sum(3/7 * 0.7^x)
# a) P(X<3) = P(X=1) + P(X=2)
x <- c(1,2)
vysl1 <- sum(3/7 * 0.7^x)
# b) P(X > 4) = 1 - P(X<=4)
x <- 1:4
vysl2 <- 1 - sum(3/7*0,7^x)
p <- 0.9
# b) P(X > 4) = 1 - P(X<=4)
x <- 1:4
vysl2 <- 1-sum(3/7*(0.7^x))
# c) P(1 < X < 4) = P(X=2) + P(X=3)
x <- c(2,3)
vysl3 <- sum(3/7*0.7^x)
P0 <- 0.9
P1 <- 1 - P0
P2 <- 0.9 * 0.1
P3 <- 0.9^2 * 0.1
P3 <- 0.9^3 * 0.1
# znazorneme si rozdeleni pravdepodobnosti take graficky:
x <- (1:6) # pro vizualizaci pridame jednu hodnotu navic -> aby od 5 sel graf "do nekonecna"
P0+P1+P2+P3
P0 <- 0.9
P1 <- 1 - P0
P2 <- 0.9 * 0.1
P3 <- 0.9 * 0.9 * 0.1
P3 <- 0.9 * 0.9 * 0.9 * 0.1
P0+P1+P2+P3
P4 <- 0.9 * 0.9 * 0.9 * 0.9 * 0.1
P0 <- 0.9
P1 <- 1 - P0
P2 <- 0.9 * 0.1
P3 <- 0.9 * 0.9 * 0.1
P3 <- 0.9 * 0.9 * 0.9 * 0.1
P4 <- 0.9 * 0.9 * 0.9 * 0.9 * 0.1
P0+P1+P2+P3+P4
P1 <- 0.1
P0 <- 0.9
P2 <- 0.9 * 0.1
P3 <- 0.9 * 0.9 * 0.1
P3 <- 0.9 * 0.9 * 0.9 * 0.1
P4 <- 0.9 * 0.9 * 0.9 * 0.9 * 0.1
P0+P1+P2+P3+P4
P1 <- 0.1
P0 <- 0.9
P2 <- 0.9 * 0.1
P3 <- 0.9^2 * 0.1
P3 <- 0.9^3 * 0.1
P4 <- 0.9^4
P0+P1+P2+P3+P4
P1+P2+P3+P4
P3 <- 0.9^2 * 0.1
P1+P2+P3+P4
P1+P2+P3+P4
P4 <- 0.9^4
P3 <- 0.9^3 * 0.1
P2 <- 0.9 * 0.1
P0 <- 0.9
P1 <- 0.1
# znazorneme si rozdeleni pravdepodobnosti take graficky:
x <- (1:6) # pro vizualizaci pridame jednu hodnotu navic -> aby od 5 sel graf "do nekonecna"
P1+P2+P3+P4
P3 <- 0.9^3
P3 <- 0.9^2 * 0.1
P2 <- 0.9 * 0.1
P3 <- 0.9^2 * 0.1
P2 <- 0.9 * 0.1
P0 <- 0.9
P1 <- 0.1
P2 <- 0.9 * 0.1
P3 <- 0.9^2 * 0.1
P3 <- 0.9^3 * 0.1
P4 <- 0.9^4
P1+P2+P3+P4
# znazorneme si rozdeleni pravdepodobnosti take graficky:
x <- (1:6) # pro vizualizaci pridame jednu hodnotu navic -> aby od 5 sel graf "do nekonecna"
P0 <- 0.9
p <- 0.9
x <- 1:5
P0 <- 0.9
P1 <- 0.1
P2 <- 0.9 * 0.1
P3 <- 0.9^2 * 0.1
P3 <- 0.9^3 * 0.1
P4 <- 0.9^4
P1+P2+P3+P4
P4 <- 0.9^4
P1+P2+P3+P4
P1 <- 0.1
P2 <- 0.9 * 0.1
P3 <- 0.9^2 * 0.1
P4 <- 0.9^4
P1+P2+P3+P4
P0 <- 0.1
P1 <- 0.9 * 0.1
P2 <- 0.9^2 * 0.1
P3 <- 0.9^3 * 0.1
P4 <- 0.9^4
P0+P1+P2+P3+P4
# znazorneme si rozdeleni pravdepodobnosti take graficky:
x <- (1:6) # pro vizualizaci pridame jednu hodnotu navic -> aby od 5 sel graf "do nekonecna"
pst
pst
pst <- c(P0,P1,P2,P3,P4)
pst
Fx <- cumsum(c(pst,0)) # nula opet jen pomocna pro vizualizaci (at ma graf kam pokracovat "do nekonecna")
n <- length(x)
plot(x = NA, y = NA, pch = NA,  yaxt="n",     # x = NA, y = NA -> prazdny graf, yaxt = "n" -> bez popisku osy "y"
xlim = c(0, max(x)),
ylim = c(0, 1),
xlab = "x",
ylab = "F_X(x)",
main = "Distribucni funkce diskretni nahodne veliciny X: pristroje",
cex.lab = 1.4) # velikost popisku os
# seda prerusovana cara -> hranice os a 1
abline(h = c(0,1), v = 0, lty = 2, col = "grey45")
# pridame rucne cisla na osu "y"
axis(side=2, at=Fx, las = 2) # las -> otoci popisky osy
# pridame rucne cisla na osu "y"
axis(side=2, at=Fx, las = 2) # las -> otoci popisky osy
# doplnime hodnoty do grafu distribucni funkce
points(x = x, y = Fx, pch=19)
for(i in 1:n){
points(x=x[i+0:1], y=Fx[c(i,i)], type="l")
points(x = x[-1], y = Fx[-n], pch=19, col="white")
points(x = x[-c(1,n)], y = Fx[-c(n-1,n)], pch=1)
}
for(i in 1:n){
points(x=x[i+0:1], y=Fx[c(i,i)], type="l")
points(x = x[-1], y = Fx[-n], pch=19, col="white")
points(x = x[-c(1,n)], y = Fx[-c(n-1,n)], pch=1)
}
################################################################################
## KIKM/PSTI: cviceni 6 - Diskretni nahodna velicina
################################################################################
rm(list=ls())
fx <- c(0,0.03,0.2,0.3,1)
